This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-05T11:50:47.853Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

For more information about Repomix, visit: https://github.com/yamadashy/repomix
</additional_info>

</file_summary>

<directory_structure>
src/
  assets/
    base.css
    colors.scss
    logo.svg
    main.css
    mediaQueryScreens.scss
  AccountPage.vue
  api.js
  config.js
  main.js
  MainApp.vue
  MainPage.vue
  Note.vue
  SignUpPage.vue
  TimeUtils.js
dockerfile
eslint.config.js
index.html
jsconfig.json
package.json
README.md
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/assets/base.css">
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

body {
  min-height: 100vh;

    /* 
      Setting up some global rules for the webpage : 

      - default font-family to use for all text
      - default text-color and size
      - remove default margins of the body element
  */

  font-family: 'Open Sans', sans-serif;
  color: #333333;
  font-size: 14px;
  margin: 0;
}


a {
  /*
      Getting rid of default formatting for <a> elements. `inherits` tells that
      `a` elements should use the value set on its parent for these properties.
  */
  text-decoration: inherit;
  color: inherit;
}


input,
textarea {
    outline: none;
}

button {
    font-family: inherit;
    /* For all browsers */
    font-size: 100%;
    /* For all browsers */
    line-height: 1.15;
    /* For all browsers */
    margin: 0;
    /* Firefox and Safari have margin */
    overflow: visible;
    /* Edge hides overflow */
    text-transform: none;
    /* Firefox inherits text-transform */
    -webkit-appearance: button;
    /* Safari otherwise prevents some styles */

    border: 0;
    border-radius: 0.25rem;
    cursor: pointer;
}
</file>

<file path="src/assets/colors.scss">
$dark-yellow: #fdcb6e;
$light-yellow: #ffeaa7;

$dark-red: #e17055;
$light-red: #fab1a0;

$dark-green: #00b894;
$light-green: #55efc4;
</file>

<file path="src/assets/logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 261.76 226.69"><path d="M161.096.001l-30.225 52.351L100.647.001H-.005l130.877 226.688L261.749.001z" fill="#41b883"/><path d="M161.096.001l-30.225 52.351L100.647.001H52.346l78.526 136.01L209.398.001z" fill="#34495e"/></svg>
</file>

<file path="src/assets/main.css">
@import './base.css';


.app-title h1 {
    text-align: center;
    margin-bottom: 20px;
}
</file>

<file path="src/assets/mediaQueryScreens.scss">
$small-screen-breakpoint: 768px;
$large-screen-breakpoint: 1024px;


@mixin smallScreen {
    @media (max-width: calc($small-screen-breakpoint - 1px)) {
        @content;
    }
}

@mixin mediumScreen {
    @media (min-width: $small-screen-breakpoint) and (max-width: calc($large-screen-breakpoint - 1px)) {
        @content;
    }
}

@mixin largeScreen {
    @media (min-width: $large-screen-breakpoint) {
        @content;
    }
}
</file>

<file path="src/AccountPage.vue">
<template>
  <div class="account-container">
    <h2>Welcome, {{ user.firstName }} {{ user.lastName }}</h2>

    <div class="reservations-section">
      <h2>My Reservations</h2>
      <button class="btn create-btn" @click="openCreateModal">Create Reservation</button>
      <table class="reservation-table">
        <thead>
          <tr>
            <th>Reservation ID</th>
            <th>Room Name</th>
            <th>Date</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
        <tr v-for="(booking, index) in bookings" :key="booking.id">
          <td>{{ booking.id }}</td>
          <td>{{ getRoomName(booking.roomId) }}</td>
          <td>{{ formatDate(booking.startTime) }}</td>
          <td>{{ formatTime(booking.startTime) }}</td>
          <td>{{ formatTime(booking.endTime) }}</td>
          <td>
            <button class="btn modify-btn" @click="editReservation(index)">Modify</button>
            <button class="btn delete-btn" @click="deleteReservation(booking.id)">Delete</button>
          </td>
        </tr>
        <tr v-if="bookings.length === 0">
          <td colspan="6" class="no-data">No reservations available</td>
        </tr>
      </tbody>
      </table>
    </div>

    <!-- Edit Reservation Modal -->
    <div v-if="showEditModal" class="modal">
      <div class="modal-content">
        <h3>Edit Reservation</h3>
        <form @submit.prevent="saveChanges">
          <div class="form-group">
            <label for="editRoom">Room</label>
            <select id="editRoom" v-model="editForm.roomId" required>
              <option v-for="room in rooms" :key="room.id" :value="room.id">
                {{ room.name }}
              </option>
            </select>
          </div>
          <div class="form-group">
            <label for="editDate">Date</label>
            <input type="date" id="editDate" v-model="editForm.date" required />
          </div>
          <div class="form-group">
            <label for="editStartTime">Start Time</label>
            <input 
              type="text"
              id="editStartTime" 
              :value="editForm.startTime"
              @input="updateEditStartTime($event.target.value)"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
              placeholder="HH:mm"
              required 
            />
          </div>
          <div class="form-group">
            <label for="editEndTime">End Time</label>
            <input 
              type="text"
              id="editEndTime" 
              :value="editForm.endTime"
              @input="updateEditEndTime($event.target.value)"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
              placeholder="HH:mm"
              required 
            />
          </div>
          <div class="error-message" v-if="timeError">{{ timeError }}</div>
          <div class="modal-actions">
        <button type="submit" class="btn save-btn">Save</button>
        <button type="button" class="btn cancel-btn" @click="closeEditModal">Cancel</button>
      </div>
    </form>
  </div>
</div>

    <!-- Create Reservation Modal -->
    <div v-if="showCreateModal" class="modal">
      <div class="modal-content">
        <h3>Create Reservation</h3>
        <form @submit.prevent="validateAndCreateReservation">
          <div class="form-group">
            <label for="createRoom">Room</label>
            <select id="createRoom" v-model="createForm.roomId" required>
              <option v-for="room in rooms" :key="room.id" :value="room.id">
                {{ room.name }}
              </option>
            </select>
          </div>
          <div class="form-group">
            <label for="createDate">Date</label>
            <input type="date" id="createDate" v-model="createForm.date" required />
          </div>
          <div class="form-group">
            <label for="createStartTime">Start Time</label>
            <input
              type="text"
              id="createStartTime"
              :value="createForm.startTime"
              @input="updateCreateStartTime($event.target.value)"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
              placeholder="HH:mm"
              required
            />
          </div>
          <div class="form-group">
            <label for="createEndTime">End Times</label>
            <input
              type="text"
              id="createEndTime"
              :value="createForm.endTime"
              @input="updateCreateEndTime($event.target.value)"
              pattern="([01]?[0-9]|2[0-3]):[0-5][0-9]"
              placeholder="HH:mm"
              required
            />
          </div>
          <div class="error-message" v-if="timeError">{{ timeError }}</div>
          <div class="modal-actions">
            <button type="submit" class="btn save-btn">Create</button>
            <button type="button" class="btn cancel-btn" @click="closeCreateModal">Cancel</button>
          </div>
        </form>
      </div>
    </div>

    <button class="btn logout-btn" @click="$emit('logout')">Logout</button>
  </div>
</template>

<script>
import api from './api';
import { TimeUtils } from './TimeUtils';

export default {
  props: {
    user: {
      required: true,
    },
  },
  data() {
    return {
      bookings: [],
      rooms: [],
      showEditModal: false,
      showCreateModal: false,
      timeError: '',
      editForm: {
        id: null,
        roomId: '',
        date: '',
        startTime: '',
        endTime: '',
      },
      createForm: {
        roomId: '',
        date: '',
        startTime: '',
        endTime: '',
      },
      currentBookingIndex: null,
    };
  },
  async created() {
    try {
      // Load rooms and bookings when component is created
      const [roomsData, bookingsData] = await Promise.all([
        api.getAllRooms(),
        api.getUserBookings(this.user.id)
      ]);
      this.rooms = roomsData;
      this.bookings = bookingsData;
    } catch (error) {
      alert('Error loading data: ' + error.message);
    }
  },
methods: {
  getRoomName(roomId) {
    const room = this.rooms.find(r => r.id === roomId);
    return room ? room.name : 'Unknown Room';
  },

  formatDate(date) {
    return TimeUtils.formatDate(date);
  },

  formatTime(time) {
    return TimeUtils.formatTime(time);
  },

  validateAndCreateReservation() {
    this.timeError = '';
    
    if (!this.createForm.date) {
        this.timeError = 'Please select a date';
        return;
    }

    const timeValidation = TimeUtils.isValidTimeRange(
        this.createForm.date,
        this.createForm.startTime,
        this.createForm.endTime
    );

    if (!timeValidation.valid) {
        this.timeError = timeValidation.error;
        return;
    }

    this.createReservation();
  },

  closeEditModal() {
    this.showEditModal = false;
    this.timeError = ''; // Add this line
    this.editForm = {
      id: null,
      roomId: '',
      date: '',
      startTime: '',
      endTime: ''
    };
    this.currentBookingIndex = null;
  },

  updateEditStartTime(value) {
    if (this.validateTimeFormat(value)) {
      this.editForm.startTime = value;
    }
  },

  updateEditEndTime(value) {
    if (this.validateTimeFormat(value)) {
      this.editForm.endTime = value;
    }
  },

  updateCreateStartTime(value) {
    if (this.validateTimeFormat(value)) {
      this.createForm.startTime = value;
    }
  },

  updateCreateEndTime(value) {
    if (this.validateTimeFormat(value)) {
      this.createForm.endTime = value;
    }
  },

  validateTimeFormat(value) {
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
    return timeRegex.test(value);
  },

  openCreateModal() {
    this.showCreateModal = true;
  },
  
  closeCreateModal() {
    this.showCreateModal = false;
    this.timeError = ''; // Add this line
    this.createForm = {
      roomId: '',
      date: '',
      startTime: '',
      endTime: '',
    };
  },

  async editReservation(index) {
    const booking = this.bookings[index];
    const startDate = new Date(booking.startTime);
    const endDate = new Date(booking.endTime);
    
    const start = TimeUtils.toUTCPlus1(booking.startTime);
    const end = TimeUtils.toUTCPlus1(booking.endTime);
    
    this.editForm = {
      id: booking.id,
      roomId: booking.roomId,
      date: start.date,
      startTime: start.time,
      endTime: end.time
    };
    this.currentBookingIndex = index;
    this.showEditModal = true;
  },

  async saveChanges() {
    this.timeError = '';
    
    try {
        const timeValidation = TimeUtils.isValidTimeRange(
          this.editForm.date,
          this.editForm.startTime,
          this.editForm.endTime
        );

        if (!timeValidation.valid) {
          this.timeError = timeValidation.error;
          return;
        }

        const startDateTime = TimeUtils.toUTC(this.editForm.date, this.editForm.startTime);
        const endDateTime = TimeUtils.toUTC(this.editForm.date, this.editForm.endTime);

        const updatedBooking = await api.updateBooking(this.editForm.id, {
          roomId: this.editForm.roomId,
          startTime: startDateTime,
          endTime: endDateTime,
          userId: this.user.id
        });
        
        this.bookings[this.currentBookingIndex] = updatedBooking;
        this.closeEditModal();
        alert('Reservation updated successfully!');
    } catch (error) {
        alert('Error updating reservation: ' + error.message);
    }
  },

  async createReservation() {
    try {
      const startDateTime = TimeUtils.toUTC(this.createForm.date, this.createForm.startTime);
      const endDateTime = TimeUtils.toUTC(this.createForm.date, this.createForm.endTime);

      const newBooking = await api.createBooking({
        roomId: this.createForm.roomId,
        startTime: startDateTime,
        endTime: endDateTime,
        userId: this.user.id
      });
      
      this.bookings.push(newBooking);
      this.closeCreateModal();
      alert('Reservation created successfully!');
    } catch (error) {
      alert('Error creating reservation: ' + error.message);
    }
  },

  async deleteReservation(bookingId) {
    if (confirm('Are you sure you want to delete this reservation?')) {
      try {
        await api.deleteBooking(bookingId);
        this.bookings = this.bookings.filter(booking => booking.id !== bookingId);
        alert('Reservation deleted successfully!');
      } catch (error) {
        alert('Error deleting reservation: ' + error.message);
      }
    }
  },
}
};
</script>



<style scoped>
/* Styling the page and modal */
.account-container {
  text-align: center;
  margin: 20px;
}

.reservations-section {
  margin-top: 20px;
}

.reservation-table {
  width: 100%;
  border-collapse: collapse;
  margin: 20px auto;
}

.reservation-table th,
.reservation-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: center;
}

.reservation-table th {
  background-color: #f4f4f4;
  font-weight: bold;
}

.no-data {
  text-align: center;
  color: #888;
}

.btn {
  margin: 0 5px;
  padding: 5px 10px;
  font-size: 14px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.modify-btn {
  background-color: #5a7dcf;
  color: white;
}

.modify-btn:hover {
  background-color: #4a69b2;
}

.delete-btn {
  background-color: #d9534f;
  color: white;
}

.delete-btn:hover {
  background-color: #c9302c;
}

.logout-btn {
  margin-top: 20px;
  background-color: #5a7dcf;
  color: white;
}

.logout-btn:hover {
  background-color: #4a69b2;
}

/* Styling for the green layout container */
/* Green button styled like the Logout button */
.create-btn {
  background-color: #28a745; /* Green background */
  color: white; /* White text */
  padding: 10px 20px; /* Similar padding as Logout */
  font-size: 16px; /* Same font size */
  border: none; /* No border */
  border-radius: 5px; /* Same rounded corners */
  cursor: pointer; /* Pointer cursor */
  transition: background-color 0.3s ease; /* Smooth hover effect */
  margin: 10px 0; /* Consistent margin */
  display: inline-block; /* Inline-block to match button alignment */
}
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 10px;
  width: 300px;
  text-align: left;
}

.error-message {
  color: #dc3545;
  margin-top: 10px;
  font-size: 14px;
}

.modal-actions {
  margin-top: 20px;
  display: flex;
  justify-content: space-between;
}

.save-btn {
  background-color: #5cb85c;
  color: white;
}

.save-btn:hover {
  background-color: #4cae4c;
}

.cancel-btn {
  background-color: #d9534f;
  color: white;
}

.cancel-btn:hover {
  background-color: #c9302c;
}

input[type="time"]::-webkit-datetime-edit-ampm-field {
  display: none;
}

input[type="time"] {
  -webkit-appearance: textfield;
  -moz-appearance: textfield;
}

input[type="text"] {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-family: monospace;
}

input[type="text"]:invalid {
  border-color: #dc3545;
}
</style>
</file>

<file path="src/api.js">
import { API_URL } from './config';

export const api = {
  // Auth endpoints
  async login(email, password) {
    const response = await fetch(`${API_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({ email, password }),
    });
    
    if (!response.ok) {
      throw new Error('Invalid credentials');
    }
    
    return response.json();
  },

  // User endpoints
  async createUser(userData) {
    const response = await fetch(`${API_URL}/api/users`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error);
    }

    return response.json();
  },

  // Booking endpoints
  async getUserBookings(userId) {
    const response = await fetch(`${API_URL}/api/bookings/user/${userId}`);
    if (!response.ok) {
      throw new Error('Failed to fetch bookings');
    }
    return response.json();
  },

  async createBooking(bookingData) {
    const response = await fetch(`${API_URL}/api/bookings`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bookingData),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error);
    }

    return response.json();
  },

  async updateBooking(id, bookingData) {
    const response = await fetch(`${API_URL}/api/bookings/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(bookingData),
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(error);
    }

    return response.json();
  },

  async deleteBooking(id) {
    const response = await fetch(`${API_URL}/api/bookings/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('Failed to delete booking');
    }
  },

  // Room endpoints
  async getAllRooms() {
    const response = await fetch(`${API_URL}/api/rooms`);
    if (!response.ok) {
      throw new Error('Failed to fetch rooms');
    }
    return response.json();
  }
};

export default api;
</file>

<file path="src/config.js">
export const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:8080';
</file>

<file path="src/main.js">
import './assets/main.css'

import { createApp } from 'vue'
import MainApp from './MainApp.vue'
// import router from './config'

createApp(MainApp).mount('#app')
// MainPageApp.use(router)
</file>

<file path="src/MainApp.vue">
<template>
  <div>
    <MainPage
      v-if="currentPage === 'main'"
      @switchToSignUp="showSignUpPage"
      @login="handleLogin"
    />
    <SignUpPage
      v-if="currentPage === 'signup'"
      @switchToMain="showMainPage"
      @createAccount="handleCreateAccount"
    />
    <AccountPage
      v-if="currentPage === 'account'"
      :user="loggedInUser"
      @logout="handleLogout"
    />
  </div>
</template>

<script>
import MainPage from './MainPage.vue';
import SignUpPage from './SignUpPage.vue';
import AccountPage from './AccountPage.vue';
import api from './api';

export default {
  data() {
    return {
      currentPage: 'main',
      loggedInUser: null,
    };
  },
  components: {
    MainPage,
    SignUpPage,
    AccountPage,
  },
  methods: {
    showSignUpPage() {
      this.currentPage = 'signup';
    },
    showMainPage() {
      this.currentPage = 'main';
    },
    async handleCreateAccount(accountDetails) {
      try {
        await api.createUser(accountDetails);
        alert('Account created successfully! You can now log in.');
        this.showMainPage();
      } catch (error) {
        alert(error.message);
      }
    },
    async handleLogin(email, password) {
      try {
        const user = await api.login(email, password);
        this.loggedInUser = user;
        this.currentPage = 'account';
      } catch (error) {
        alert('Invalid email or password.');
      }
    },
    handleLogout() {
      this.loggedInUser = null;
      this.showMainPage();
    },
  },
};
</script>
</file>

<file path="src/MainPage.vue">
<template>
  <div class="main-container">
    <form class="form-container" @submit.prevent="login">
      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" v-model="email" placeholder="Enter your email" />
      </div>
      <div class="input-group">
        <label for="password">Password</label>
        <input type="password" id="password" v-model="password" placeholder="Enter your password" />
      </div>
      <div class="button-group">
        <button type="submit" class="btn">Login</button>
        <button type="button" class="btn" @click="$emit('switchToSignUp')">Sign up</button>
      </div>
    </form>
  </div>
</template>

<script>
export default {
  data() {
    return {
      email: '',
      password: '',
    };
  },
  methods: {
    login() {
      this.$emit('login', this.email, this.password);
    },
  },
};
</script>



<style scoped>
.main-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f8f9fa;
}

.form-container {
  width: 300px;
  padding: 20px;
  border-radius: 10px;
  background-color: white;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.input-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-size: 14px;
  color: #333;
}

input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
}

.button-group {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.btn {
  width: 80%;
  margin: 5px 0;
  padding: 10px;
  font-size: 16px;
  color: white;
  background-color: #5a7dcf;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #4a69b2;
}
</style>
</file>

<file path="src/Note.vue">
<script setup>

import {ref} from 'vue';

defineProps(['note']);
</script>


<template>
  <div class="main-container">
    <form class="form-container">
      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" v-model="email" placeholder="Enter your email" />
      </div>
      <div class="input-group">
        <label for="password">Password</label>
        <input type="password" id="password" v-model="password" placeholder="Enter your password" />
      </div>
      <div class="button-group">
        <button type="button" class="btn" @click="login">Login</button>
        <button type="button" class="btn" @click="signUp">Sign up</button>
      </div>
    </form>
  </div>
</template>

<script>
export default {
  data() {
    return {
      email: '',
      password: '',
    };
  },
  methods: {
    login() {
      console.log('Login clicked');
    },
    signUp() {
      console.log('Sign up clicked');
    },
  },
};
</script>

<style scoped>
.main-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f8f9fa;
}

.form-container {
  width: 300px;
  padding: 20px;
  border-radius: 10px;
  background-color: white;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.input-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-size: 14px;
  color: #333;
}

input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
}

.button-group {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.btn {
  width: 80%;
  margin: 5px 0;
  padding: 10px;
  font-size: 16px;
  color: white;
  background-color: #5a7dcf;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.btn:hover {
  background-color: #4a69b2;
}
</style>
</file>

<file path="src/SignUpPage.vue">
<template>
  <div class="signup-container">
    <form class="form-container" @submit.prevent="createAccount">
      <div class="input-group">
        <label for="firstName">First name</label>
        <input type="text" id="firstName" v-model="firstName" placeholder="Enter your first name" />
      </div>
      <div class="input-group">
        <label for="lastName">Last name</label>
        <input type="text" id="lastName" v-model="lastName" placeholder="Enter your last name" />
      </div>
      <div class="input-group">
        <label for="email">Email</label>
        <input type="email" id="email" v-model="email" placeholder="Enter your email" />
      </div>
      <div class="input-group">
        <label for="password">Password</label>
        <input type="password" id="password" v-model="password" placeholder="Password" />
      </div>
      <div class="input-group">
        <label for="confirmPassword">Confirm Password</label>
        <input type="password" id="confirmPassword" v-model="confirmPassword" placeholder="Confirm Password" />
      </div>
      <div class="button-group">
        <button type="submit" class="btn">Create account</button>
        <button type="button" class="btn back-btn" @click="$emit('switchToMain')">Back</button>
      </div>
      <div class="error-message" v-if="errorMessage">{{ errorMessage }}</div>
    </form>
  </div>
</template>

<script>
export default {
  data() {
    return {
      firstName: '',
      lastName: '',
      email: '',
      password: '',
      confirmPassword: '',
      errorMessage: '',
    };
  },
  methods: {
    createAccount() {
      this.errorMessage = '';

      if (!this.firstName || !this.lastName || !this.email || !this.password || !this.confirmPassword) {
        this.errorMessage = 'All fields are required.';
        return;
      }

      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailPattern.test(this.email)) {
        this.errorMessage = 'Please enter a valid email address.';
        return;
      }

      if (this.password !== this.confirmPassword) {
        this.errorMessage = 'Passwords do not match.';
        return;
      }

      this.$emit('createAccount', {
        firstName: this.firstName,
        lastName: this.lastName,
        email: this.email,
        password: this.password,
      });
    },
  },
};
</script>


<style scoped>
.signup-container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background-color: #f8f9fa; /* Light gray background */
}

.form-container {
  width: 300px;
  padding: 20px;
  border-radius: 10px;
  background-color: white;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for a clean look */
}

.input-group {
  margin-bottom: 15px;
}

label {
  display: block;
  margin-bottom: 5px;
  font-size: 14px;
  color: #333;
}

input {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
}

input::placeholder {
  color: #aaa; /* Placeholder color */
}

.button-group {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.btn {
  width: 100%;
  padding: 10px;
  font-size: 16px;
  color: white;
  background-color: #5a7dcf; /* Blue button background */
  border: none;
  border-radius: 20px; /* Rounded corners */
  cursor: pointer;
  margin-bottom: 10px;
  transition: background-color 0.3s ease; /* Smooth hover effect */
}

.btn:hover {
  background-color: #4a69b2; /* Darker blue on hover */
}

.back-btn {
  background-color: #d9534f; /* Red for back button */
}

.back-btn:hover {
  background-color: #c9302c; /* Darker red on hover */
}

.error-message {
  margin-top: 10px;
  color: red;
  text-align: center;
  font-size: 14px;
}
</style>
</file>

<file path="src/TimeUtils.js">
export const TimeUtils = {
    toUTC(date, timeStr) {
      const [hours, minutes] = timeStr.split(':');
      const localDate = new Date(date);
      localDate.setHours(parseInt(hours), parseInt(minutes));
      return localDate.toISOString();
    },
  
    toUTCPlus1(utcDateStr) {
      const date = new Date(utcDateStr);
      date.setHours(date.getHours() + 1);
      return {
        date: date.toISOString().split('T')[0],
        time: this.to24HourFormat(date)
      };
    },
  
    formatTime(isoDateString) {
      if (!isoDateString) return '';
      const date = new Date(isoDateString);
      date.setHours(date.getHours() + 1);
      return this.to24HourFormat(date);
    },
  
    formatDate(isoDateString) {
      if (!isoDateString) return '';
      const date = new Date(isoDateString);
      return date.toLocaleDateString('en-GB', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
    },

    isValidTimeRange(date, startTime, endTime) {
        if (!date || !startTime || !endTime) {
            return {
                valid: false,
                error: 'Date, start time, and end time are required'
            };
        }

        const [startHours, startMinutes] = startTime.split(':').map(Number);
        const [endHours, endMinutes] = endTime.split(':').map(Number);

        // Convert to minutes for easier comparison
        const startTotalMinutes = startHours * 60 + startMinutes;
        const endTotalMinutes = endHours * 60 + endMinutes;

        if (endTotalMinutes <= startTotalMinutes) {
            return {
                valid: false,
                error: 'End time must be after start time'
            };
        }

        // Ensure the times are within valid range (00:00-23:59)
        if (startHours > 23 || startMinutes > 59 || endHours > 23 || endMinutes > 59) {
            return {
                valid: false,
                error: 'Invalid time format'
            };
        }

        return {
            valid: true,
            error: null
        };
    },

    // New method for consistent 24-hour format
    to24HourFormat(date) {
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      return `${hours}:${minutes}`;
    }
};
</file>

<file path="dockerfile">
FROM node:18

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

EXPOSE 5173

CMD ["npm", "run", "dev", "--", "--host"]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import pluginVue from 'eslint-plugin-vue'

export default [
  {
    name: 'app/files-to-lint',
    files: ['**/*.{js,mjs,jsx,vue}'],
  },

  {
    name: 'app/files-to-ignore',
    ignores: ['**/dist/**', '**/dist-ssr/**', '**/coverage/**'],
  },

  js.configs.recommended,
  ...pluginVue.configs['flat/essential'],
]
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="">

<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/favicon.ico">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Room Reservation</title>
</head>

<body>
  <div class="app-title">
    <h1>Room Reservation</h1>
  </div>
  <div id="app"></div>
  <script type="module" src="./src/main.js"></script>
</body>

</html>
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}
</file>

<file path="package.json">
{
  "name": "emse-vue-demo",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "lint": "eslint . --fix"
  },
  "dependencies": {
    "vue": "^3.5.12",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.14.0",
    "@vitejs/plugin-vue": "^5.1.4",
    "eslint": "^9.14.0",
    "eslint-plugin-vue": "^9.30.0",
    "sass-embedded": "^1.80.6",
    "vite": "^5.4.10"
  }
}
</file>

<file path="README.md">
# EMSE Vue Demo

This template should help get you started developing with Vue 3 in Vite.

## Recommended IDE Setup

[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).

## Customize configuration

See [Vite Configuration Reference](https://vite.dev/config/).

## Project Setup

```sh
npm install
```

### Compile and Hot-Reload for Development

```sh
npm run dev
```

### Compile and Minify for Production

```sh
npm run build
```

### Lint with [ESLint](https://eslint.org/)

```sh
npm run lint
```
</file>

<file path="vite.config.js">
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

export default defineConfig({
  plugins: [vue()],
  server: {
    proxy: {
      '/api': {
        target: 'https://roomreservation.cleverapps.io',
        changeOrigin: true,
        secure: false,
      }
    }
  }
});
</file>

</files>
